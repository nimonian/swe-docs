(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{444:function(t,e,a){"use strict";a.r(e);var n=a(67),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"rest-apis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rest-apis"}},[t._v("#")]),t._v(" REST APIs")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://si-mv.github.io/slides/multiverse/2-1-1-rest-apis.html#/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Slides"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("REST = Representational State Transfer")]),t._v(" "),a("li",[t._v("REST is an "),a("em",[t._v("architectural style")]),t._v(" which emphasises interacting with data with http requests to url endpoints")]),t._v(" "),a("li",[t._v("API = Application Programming Interface - it's a way of interacting with an app with code")]),t._v(" "),a("li",[t._v("The four main http methods which roughly correspond to CRUD are GET (read), POST (create), PUT (update), DELETE (delete)")]),t._v(" "),a("li",[t._v("The most common status codes are")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("Code")]),t._v(" "),a("th",[t._v("Meaning")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("200")]),t._v(" "),a("td",[t._v("Success")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("201")]),t._v(" "),a("td",[t._v("Created successfuly")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("400")]),t._v(" "),a("td",[t._v("Invalid request")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("401")]),t._v(" "),a("td",[t._v("Failed to authenticate")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("403")]),t._v(" "),a("td",[t._v("Action is forbidden to this user")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("404")]),t._v(" "),a("td",[t._v("Resource not found")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("500")]),t._v(" "),a("td",[t._v("Internal server error")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("503")]),t._v(" "),a("td",[t._v("Service unavailable")])])])]),t._v(" "),a("ul",[a("li",[t._v("REST API endpoints should be nouns not verbs, and should be consistent. "),a("code",[t._v("getImage?id=a6r7p")]),t._v(" is bad; "),a("code",[t._v("GET images/a6r7p")]),t._v(" is good.")])]),t._v(" "),a("h2",{attrs:{id:"assignment-cloudbox"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assignment-cloudbox"}},[t._v("#")]),t._v(" ðŸ“¦ Assignment: Cloudbox")]),t._v(" "),a("p",[t._v("We will build Cloudbox - a storage provider for user text documents. Cloudbox plans to become a megacorporation and have identity and data for millions of users. They expose a REST API for users to interact with their data. They hired an engineer to build an MVP. That engineer is you!")]),t._v(" "),a("p",[t._v("We will build the authentication system poorly at first - just storing the passwords as plaintext, and requiring a user to send their password with every request to a protected endpoint. (Building it badly will help you appreciate the problems associated with auth - please don't replicate these practices in real-world applications!)")]),t._v(" "),a("h3",{attrs:{id:"user-story"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#user-story"}},[t._v("#")]),t._v(" User story")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("As a...")]),t._v(" "),a("th",[t._v("I can...")]),t._v(" "),a("th",[t._v("so that...")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Status")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("user")]),t._v(" "),a("td",[t._v("create an account with a "),a("code",[t._v("username")]),t._v(" and "),a("code",[t._v("password")])]),t._v(" "),a("td",[t._v("I can sign in securely")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("checkbox")],1)]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("user")]),t._v(" "),a("td",[t._v("edit my account details")]),t._v(" "),a("td",[t._v("I control my identity and keep my account secure")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("checkbox")],1)]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("user")]),t._v(" "),a("td",[t._v("create a document with text, timestamp and author")]),t._v(" "),a("td",[t._v("I can save my files on the server")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("checkbox")],1)]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("user")]),t._v(" "),a("td",[t._v("edit my own docs")]),t._v(" "),a("td",[t._v("I can change their content")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("checkbox")],1)]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("user")]),t._v(" "),a("td",[t._v("delete my own docs")]),t._v(" "),a("td",[t._v("I can remove my data from the server")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("checkbox")],1)]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("user")]),t._v(" "),a("td",[t._v("delete my account and all associated data")]),t._v(" "),a("td",[t._v("I exercise my GDPR right to be forgotten")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("checkbox")],1)])])]),t._v(" "),a("h3",{attrs:{id:"set-up"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-up"}},[t._v("#")]),t._v(" Set up")]),t._v(" "),a("ul",[a("li",[t._v("Fork the template on GitHub and "),a("code",[t._v("npm install")]),t._v(" on your machine.")]),t._v(" "),a("li",[t._v("Have a look around the template and make note of the Todos.")]),t._v(" "),a("li",[t._v("Install the REST Client plugin for VS Code and skim the docs so you know how it works.")])]),t._v(" "),a("h3",{attrs:{id:"account-creation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#account-creation"}},[t._v("#")]),t._v(" Account creation")]),t._v(" "),a("ul",[a("li",[t._v("Set up a "),a("code",[t._v("POST /auth/user")]),t._v(" end-point which expects a username, password, firstName, secondName, email. If the username is not in use, create the user and save their details in the "),a("code",[t._v("users")]),t._v(" array. Send the appropriate status codes in response.")]),t._v(" "),a("li",[t._v("Ensure that the server assigns a "),a("code",[t._v("uid")]),t._v(" to each newly created user (you could use "),a("a",{attrs:{href:"https://www.npmjs.com/package/nanoid",target:"_blank",rel:"noopener noreferrer"}},[t._v("nanoid"),a("OutboundLink")],1),t._v(").")]),t._v(" "),a("li",[t._v("Set up a "),a("code",[t._v("GET /auth/user/:uid")]),t._v(" which expects a username and password combination for the user with the given uid. If it matches, respond with the user entry from the "),a("code",[t._v("user")]),t._v(" array, "),a("em",[t._v("but not the password")]),t._v(".")]),t._v(" "),a("li",[t._v("Test your endpoints with the REST Client plugin (or Postman) by POSTing a new user and then GETting them.")]),t._v(" "),a("li",[t._v("Set up a "),a("code",[t._v("PUT /auth/user/:id")]),t._v(" which can update the user's information, including username and password (now you see why the uid is so important!).")]),t._v(" "),a("li",[t._v("Test your endpoint by PUTing a user and GETting them.")]),t._v(" "),a("li",[t._v("Set up a "),a("code",[t._v("DELETE /auth/user/:id")]),t._v(" endpoint which deletes the user.")])]),t._v(" "),a("h3",{attrs:{id:"document-handling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-handling"}},[t._v("#")]),t._v(" Document handling")]),t._v(" "),a("ul",[a("li",[t._v("Set up endpoints for GET, POST, PUT and DELETE on "),a("code",[t._v("/api/docs")]),t._v(".")]),t._v(" "),a("li",[t._v("Make sure you send the correct codes, and protect GET, PUT and DELETE requests by requiring the user to send their username and password with each request.")])]),t._v(" "),a("h3",{attrs:{id:"extension-query-params"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extension-query-params"}},[t._v("#")]),t._v(" Extension: Query params")]),t._v(" "),a("ul",[a("li",[t._v("Modify your "),a("code",[t._v("GET /api/docs/:id")]),t._v(" endpoint to allow a query parameter "),a("code",[t._v("?contains=")]),t._v(" which accepts a string and returns any doc which contains that string within its content.")]),t._v(" "),a("li",[t._v("Allow another query param of "),a("code",[t._v("&sort=")]),t._v(" which sorts the docs by the time they were created. The values of "),a("code",[t._v("sort")]),t._v(" can be "),a("code",[t._v("asc")]),t._v(" for ascending or "),a("code",[t._v("desc")]),t._v(" for descending. You will need to modify your "),a("code",[t._v("POST /api/docs")]),t._v(" to include a timestamp when the doc is saved (you could use "),a("code",[t._v("Date.now()")]),t._v(").")]),t._v(" "),a("li",[t._v("Allow another query param of "),a("code",[t._v("&limit=")]),t._v(". This is an integer which determines how many docs are sent in response.")]),t._v(" "),a("li",[t._v("Finally, add a "),a("code",[t._v("&cursor=")]),t._v(" query param, and integer which determines how many documents to skip before they are returned. Together with "),a("code",[t._v("sort")]),t._v(" and "),a("code",[t._v("limit")]),t._v(", this will allow front-end devs to build "),a("strong",[t._v("pagination")]),t._v(".")])])])}),[],!1,null,null,null);e.default=r.exports}}]);